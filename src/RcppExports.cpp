// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEnsmallen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// hmc
List hmc(const List Time_stamp, const List Go_RT, const List Go_RT_S, const double SSD_min, const arma::vec& U, const List Ind_G, const List Stop_S_D, const double sigma, arma::mat delta_param, arma::mat gama, arma::mat beta, arma::mat stop_param, arma::mat prob_param, const List Indicator, const List mean_priors_main, const List var_priors_main, arma::mat penal_param, const arma::vec prior_penal_stop, const arma::vec T_Go, const arma::vec k, const arma::vec T_Total, const double a, const double b, const arma::vec prob_hyp, double eta_b_l, double eta_b_r, double eta_nu_l, double eta_nu_r, List gama_Ind, List beta_Ind, const double nu_d, const arma::vec lam, const List Phi_mat, arma::vec rand_param_g_l, arma::vec rand_param_g_r, arma::vec rand_param_b_l, arma::vec rand_param_b_r, const double kappa, const List ranges, const double L, const int leapmax, const double nhmc, int thin, unsigned nparall, const List l_bound, const double upper_bound, const bool update_gama_beta, const bool update_penalty, const bool update_stop_prob, const bool update_rand_eff, const bool update_delta, const bool lt);
RcppExport SEXP _BSDDM_hmc(SEXP Time_stampSEXP, SEXP Go_RTSEXP, SEXP Go_RT_SSEXP, SEXP SSD_minSEXP, SEXP USEXP, SEXP Ind_GSEXP, SEXP Stop_S_DSEXP, SEXP sigmaSEXP, SEXP delta_paramSEXP, SEXP gamaSEXP, SEXP betaSEXP, SEXP stop_paramSEXP, SEXP prob_paramSEXP, SEXP IndicatorSEXP, SEXP mean_priors_mainSEXP, SEXP var_priors_mainSEXP, SEXP penal_paramSEXP, SEXP prior_penal_stopSEXP, SEXP T_GoSEXP, SEXP kSEXP, SEXP T_TotalSEXP, SEXP aSEXP, SEXP bSEXP, SEXP prob_hypSEXP, SEXP eta_b_lSEXP, SEXP eta_b_rSEXP, SEXP eta_nu_lSEXP, SEXP eta_nu_rSEXP, SEXP gama_IndSEXP, SEXP beta_IndSEXP, SEXP nu_dSEXP, SEXP lamSEXP, SEXP Phi_matSEXP, SEXP rand_param_g_lSEXP, SEXP rand_param_g_rSEXP, SEXP rand_param_b_lSEXP, SEXP rand_param_b_rSEXP, SEXP kappaSEXP, SEXP rangesSEXP, SEXP LSEXP, SEXP leapmaxSEXP, SEXP nhmcSEXP, SEXP thinSEXP, SEXP nparallSEXP, SEXP l_boundSEXP, SEXP upper_boundSEXP, SEXP update_gama_betaSEXP, SEXP update_penaltySEXP, SEXP update_stop_probSEXP, SEXP update_rand_effSEXP, SEXP update_deltaSEXP, SEXP ltSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type Time_stamp(Time_stampSEXP);
    Rcpp::traits::input_parameter< const List >::type Go_RT(Go_RTSEXP);
    Rcpp::traits::input_parameter< const List >::type Go_RT_S(Go_RT_SSEXP);
    Rcpp::traits::input_parameter< const double >::type SSD_min(SSD_minSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type U(USEXP);
    Rcpp::traits::input_parameter< const List >::type Ind_G(Ind_GSEXP);
    Rcpp::traits::input_parameter< const List >::type Stop_S_D(Stop_S_DSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type delta_param(delta_paramSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gama(gamaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type stop_param(stop_paramSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type prob_param(prob_paramSEXP);
    Rcpp::traits::input_parameter< const List >::type Indicator(IndicatorSEXP);
    Rcpp::traits::input_parameter< const List >::type mean_priors_main(mean_priors_mainSEXP);
    Rcpp::traits::input_parameter< const List >::type var_priors_main(var_priors_mainSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type penal_param(penal_paramSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type prior_penal_stop(prior_penal_stopSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type T_Go(T_GoSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type T_Total(T_TotalSEXP);
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type prob_hyp(prob_hypSEXP);
    Rcpp::traits::input_parameter< double >::type eta_b_l(eta_b_lSEXP);
    Rcpp::traits::input_parameter< double >::type eta_b_r(eta_b_rSEXP);
    Rcpp::traits::input_parameter< double >::type eta_nu_l(eta_nu_lSEXP);
    Rcpp::traits::input_parameter< double >::type eta_nu_r(eta_nu_rSEXP);
    Rcpp::traits::input_parameter< List >::type gama_Ind(gama_IndSEXP);
    Rcpp::traits::input_parameter< List >::type beta_Ind(beta_IndSEXP);
    Rcpp::traits::input_parameter< const double >::type nu_d(nu_dSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const List >::type Phi_mat(Phi_matSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rand_param_g_l(rand_param_g_lSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rand_param_g_r(rand_param_g_rSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rand_param_b_l(rand_param_b_lSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rand_param_b_r(rand_param_b_rSEXP);
    Rcpp::traits::input_parameter< const double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const List >::type ranges(rangesSEXP);
    Rcpp::traits::input_parameter< const double >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int >::type leapmax(leapmaxSEXP);
    Rcpp::traits::input_parameter< const double >::type nhmc(nhmcSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< unsigned >::type nparall(nparallSEXP);
    Rcpp::traits::input_parameter< const List >::type l_bound(l_boundSEXP);
    Rcpp::traits::input_parameter< const double >::type upper_bound(upper_boundSEXP);
    Rcpp::traits::input_parameter< const bool >::type update_gama_beta(update_gama_betaSEXP);
    Rcpp::traits::input_parameter< const bool >::type update_penalty(update_penaltySEXP);
    Rcpp::traits::input_parameter< const bool >::type update_stop_prob(update_stop_probSEXP);
    Rcpp::traits::input_parameter< const bool >::type update_rand_eff(update_rand_effSEXP);
    Rcpp::traits::input_parameter< const bool >::type update_delta(update_deltaSEXP);
    Rcpp::traits::input_parameter< const bool >::type lt(ltSEXP);
    rcpp_result_gen = Rcpp::wrap(hmc(Time_stamp, Go_RT, Go_RT_S, SSD_min, U, Ind_G, Stop_S_D, sigma, delta_param, gama, beta, stop_param, prob_param, Indicator, mean_priors_main, var_priors_main, penal_param, prior_penal_stop, T_Go, k, T_Total, a, b, prob_hyp, eta_b_l, eta_b_r, eta_nu_l, eta_nu_r, gama_Ind, beta_Ind, nu_d, lam, Phi_mat, rand_param_g_l, rand_param_g_r, rand_param_b_l, rand_param_b_r, kappa, ranges, L, leapmax, nhmc, thin, nparall, l_bound, upper_bound, update_gama_beta, update_penalty, update_stop_prob, update_rand_eff, update_delta, lt));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BSDDM_hmc", (DL_FUNC) &_BSDDM_hmc, 52},
    {NULL, NULL, 0}
};

RcppExport void R_init_BSDDM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
