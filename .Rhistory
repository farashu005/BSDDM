dat = dat,
cluster_label,
Anxiety_status,
sub_type ,
sample_size = N,
file_name,prep_data_file_name,
range_main_eff = range_main_effect,
range_p = range_p,
range_d = range_d,
range_stop_prob = range_stop_prob,
range_rand_eff = range_rand_eff,
range_rand_g_l = range_rand_g_l,
range_rand_g_r = range_rand_g_r,
range_rand_b_l = range_rand_b_l,
range_rand_b_r = range_rand_b_r,
penal_param.int = penal_param.int,
delta_prime.int = delta_prime.int,
stop_param.int = stop_param.int,
prob_param.int = prob_param.int,
rand_param_g_l.int = rand_param_g_l.int,
rand_param_g_r.int = rand_param_g_r.int,
rand_param_b_l.int = rand_param_b_l.int,
rand_param_b_r.int = rand_param_b_r.int,
nu_d, kappa, a, b,
CA_threshold, nknots, m, scale,
SSD_min, upper_bound,
L, leapmax, thin, nparall, nhmc,intercept)
file.exists("inst/scripts/Data_Preparation_without_intercept.R")
system.file("scripts", "Data_Preparation_without_intercept.R", package = "BSDDM")
system.file("scripts", "Data_Preparation_without_intercept.R", package = "BSDDM")
devtools::document()     # Ensure roxygen updates everything
setwd("/home/012/f/fr/frs200000/BSDDM")
devtools::document()     # Ensure roxygen updates everything
devtools::install()      # Reinstall the full package
rm(list = ls())
save_location<-"~/Code_Running_Preparation/Saved_Model"
file_name = "Advant_Non_Anx"
prep_data_file_name<-"Advant_Non_Anx_data"
cluster_label = "Advantaged Overall"
Anxiety_status = "TD"
sub_type = "Quick_starter"
N=200
# ## Initialiation of Parameters
range_main_effect<-c(0,0.000065) ## /2.5  ## Decrease to increase
range_p= c(0,0.0072) ## Decrease to increase
range_d= c(0,0.06) ## Decrease to increase
range_stop_prob= c(0,0.007) ## Decrease to increase
range_rand_eff=c(0,0.19) ## m=10 ## with scale
range_rand_g_l<-range_rand_g_r<-c(0,0.045) ## m=10 # with scale
range_rand_b_l<-range_rand_b_r<-c(0,0.045) ##.25
## Initializing
set.seed (1451)
l<-log(runif(N, min = 0, max = 1))
a<-log(runif(N, min = 0, max = 1))
penal_param.int<-as.matrix(rbind(l,a))
delta_prime.int<-matrix(c(rep(-2,2*N)),nrow=2,ncol=N)
b_stop.int=rep(log(25),N)
nu_stop.int=rep(log(0.2),N)
stop_param.int<-as.matrix(rbind(b_stop.int,nu_stop.int))
GF.int<-rep(log(2),N)
TF1.int<-rep(log(32),N)
TF2.int<-rep(log(6),N)
prob_param.int<-as.matrix(rbind(GF.int,TF1.int,TF2.int),ncol=N,nrow=3)
rand_param_g_l.int<-rand_param_g_r.int<-as.matrix(c(0,log(400)),nrow=2)
rand_param_b_l.int<-rand_param_b_r.int<-as.matrix(c(0,log(400)),nrow=2)
## Dataset
dat <- readRDS("~/Code_Running_Preparation/Data/full_data.rds")
#source("~/Code_Running_Preparation/Code_Running_function.R", echo=TRUE)
nu_d = 3/2
kappa = 1
a = 1/5
b = 1/5
CA_threshold = 0.6
nknots = 12
m = 10
scale = 100
SSD_min = 50
upper_bound = 1000
L = 5
leapmax = 8
thin = 5
nparall = 48
nhmc = 20000
intercept=FALSE
library(BSDDM)
code_run(save_location = save_location,
dat = dat,
cluster_label,
Anxiety_status,
sub_type ,
sample_size = N,
file_name,prep_data_file_name,
range_main_eff = range_main_effect,
range_p = range_p,
range_d = range_d,
range_stop_prob = range_stop_prob,
range_rand_eff = range_rand_eff,
range_rand_g_l = range_rand_g_l,
range_rand_g_r = range_rand_g_r,
range_rand_b_l = range_rand_b_l,
range_rand_b_r = range_rand_b_r,
penal_param.int = penal_param.int,
delta_prime.int = delta_prime.int,
stop_param.int = stop_param.int,
prob_param.int = prob_param.int,
rand_param_g_l.int = rand_param_g_l.int,
rand_param_g_r.int = rand_param_g_r.int,
rand_param_b_l.int = rand_param_b_l.int,
rand_param_b_r.int = rand_param_b_r.int,
nu_d, kappa, a, b,
CA_threshold, nknots, m, scale,
SSD_min, upper_bound,
L, leapmax, thin, nparall, nhmc,intercept)
system.file("scripts", "Data_Preparation_without_intercept.R", package = "BSDDM")
system.file("inst/scripts", "Data_Preparation_without_intercept.R", package = "BSDDM")
file.exists("inst/scripts/Data_Preparation_without_intercept.R")
dir.create("inst/scripts", recursive = TRUE, showWarnings = FALSE)
file.copy(from = "~/BSDDM/man/inst/scripts/Data_Preparation_without_intercept.R",
to = "inst/scripts/Data_Preparation_without_intercept.R")
file.exists("~/BSDDM/inst/scripts/Data_Preparation_without_intercept.R")
file.exists("inst/scripts/Data_Preparation_without_intercept.R")
dir.create("inst/scripts", recursive = TRUE, showWarnings = FALSE)
file.copy(from = "~/BSDDM/man/inst/scripts/Data_Preparation_without_intercept.R",
to = "inst/scripts/Data_Preparation_without_intercept.R")
file.copy(from = "/home/012/f/fr/frs200000/BSDDM/man/inst/scripts/Data_Preparation_without_intercept.R",
to = "inst/scripts/Data_Preparation_without_intercept.R")
file.exists("/home/012/f/fr/frs200000/BSDDM/man/inst/scripts/Data_Preparation_without_intercept.R")
dir.exists("inst/scripts")
dir.exists("inst/scripts")
file.exists("/home/012/f/fr/frs200000/BSDDM/man/inst/scripts/Data_Preparation_without_intercept.R")
list.files("/home/012/f/fr/frs200000/BSDDM/man/inst/scripts", full.names = TRUE)
file.rename(
from = "/home/012/f/fr/frs200000/BSDDM/man/inst/scripts/Data Preparation_without_intercept.R",
to   = "/home/012/f/fr/frs200000/BSDDM/man/inst/scripts/Data_Preparation_without_intercept.R"
)
file.rename(
from = "/home/012/f/fr/frs200000/BSDDM/man/inst/scripts/Method of Moment Method_without_intercept.R",
to   = "/home/012/f/fr/frs200000/BSDDM/man/inst/scripts/Method_of_Moment_Method_without_intercept.R"
)
# Source and destination directories
src_dir <- "/home/012/f/fr/frs200000/BSDDM/man/inst/scripts"
dest_dir <- "inst/scripts"
# Ensure destination exists
if (!dir.exists(dest_dir)) dir.create(dest_dir, recursive = TRUE)
# List all .R files in the source directory
script_files <- list.files(src_dir, pattern = "\\.R$", full.names = TRUE)
# Loop through and copy with new names (replacing spaces with underscores)
for (src_file in script_files) {
# Get clean filename (no spaces)
new_name <- gsub(" ", "_", basename(src_file))
dest_file <- file.path(dest_dir, new_name)
# Rename source file temporarily (in memory only)
success <- file.copy(from = src_file, to = dest_file, overwrite = TRUE)
message(sprintf("%s -> %s [%s]", src_file, dest_file, ifelse(success, "OK", "FAILED")))
}
devtools::document()   # Update documentation and NAMESPACE
setwd("/home/012/f/fr/frs200000/BSDDM")  # or wherever your BSDDM package lives
devtools::document()   # Update documentation and NAMESPACE
devtools::install()    # Reinstall the BSDDM package
rm(list = ls())
save_location<-"~/Code_Running_Preparation/Saved_Model"
file_name = "Advant_Non_Anx"
prep_data_file_name<-"Advant_Non_Anx_data"
cluster_label = "Advantaged Overall"
Anxiety_status = "TD"
sub_type = "Quick_starter"
N=200
# ## Initialiation of Parameters
range_main_effect<-c(0,0.000065) ## /2.5  ## Decrease to increase
range_p= c(0,0.0072) ## Decrease to increase
range_d= c(0,0.06) ## Decrease to increase
range_stop_prob= c(0,0.007) ## Decrease to increase
range_rand_eff=c(0,0.19) ## m=10 ## with scale
range_rand_g_l<-range_rand_g_r<-c(0,0.045) ## m=10 # with scale
range_rand_b_l<-range_rand_b_r<-c(0,0.045) ##.25
## Initializing
set.seed (1451)
l<-log(runif(N, min = 0, max = 1))
a<-log(runif(N, min = 0, max = 1))
penal_param.int<-as.matrix(rbind(l,a))
delta_prime.int<-matrix(c(rep(-2,2*N)),nrow=2,ncol=N)
b_stop.int=rep(log(25),N)
nu_stop.int=rep(log(0.2),N)
stop_param.int<-as.matrix(rbind(b_stop.int,nu_stop.int))
GF.int<-rep(log(2),N)
TF1.int<-rep(log(32),N)
TF2.int<-rep(log(6),N)
prob_param.int<-as.matrix(rbind(GF.int,TF1.int,TF2.int),ncol=N,nrow=3)
rand_param_g_l.int<-rand_param_g_r.int<-as.matrix(c(0,log(400)),nrow=2)
rand_param_b_l.int<-rand_param_b_r.int<-as.matrix(c(0,log(400)),nrow=2)
## Dataset
dat <- readRDS("~/Code_Running_Preparation/Data/full_data.rds")
#source("~/Code_Running_Preparation/Code_Running_function.R", echo=TRUE)
nu_d = 3/2
kappa = 1
a = 1/5
b = 1/5
CA_threshold = 0.6
nknots = 12
m = 10
scale = 100
SSD_min = 50
upper_bound = 1000
L = 5
leapmax = 8
thin = 5
nparall = 48
nhmc = 20000
intercept=FALSE
library(BSDDM)
code_run(save_location = save_location,
dat = dat,
cluster_label,
Anxiety_status,
sub_type ,
sample_size = N,
file_name,prep_data_file_name,
range_main_eff = range_main_effect,
range_p = range_p,
range_d = range_d,
range_stop_prob = range_stop_prob,
range_rand_eff = range_rand_eff,
range_rand_g_l = range_rand_g_l,
range_rand_g_r = range_rand_g_r,
range_rand_b_l = range_rand_b_l,
range_rand_b_r = range_rand_b_r,
penal_param.int = penal_param.int,
delta_prime.int = delta_prime.int,
stop_param.int = stop_param.int,
prob_param.int = prob_param.int,
rand_param_g_l.int = rand_param_g_l.int,
rand_param_g_r.int = rand_param_g_r.int,
rand_param_b_l.int = rand_param_b_l.int,
rand_param_b_r.int = rand_param_b_r.int,
nu_d, kappa, a, b,
CA_threshold, nknots, m, scale,
SSD_min, upper_bound,
L, leapmax, thin, nparall, nhmc,intercept)
system.file("scripts", "Data_Preparation_without_intercept.R", package = "BSDDM")
file.exists(system.file("scripts", "Data_Preparation_without_intercept.R", package = "BSDDM"))
dir.create("inst/scripts", recursive = TRUE, showWarnings = FALSE)
file.copy(
from = "/home/012/f/fr/frs200000/BSDDM/man/inst/scripts/Data_Preparation_without_intercept.R",
to = "inst/scripts/Data_Preparation_without_intercept.R",
overwrite = TRUE
)
file.exists(system.file("scripts", "Data_Preparation_without_intercept.R", package = "BSDDM"))
devtools::install()
setwd("/home/012/f/fr/frs200000/BSDDM/BSDDM")  # Set working directory to the package root
setwd("/home/012/f/fr/frs200000/BSDDM")  # Set working directory to the package root
list.files()
devtools::install()
system.file("scripts", "Data_Preparation_without_intercept.R", package = "BSDDM")
file.exists(system.file("scripts", "Data_Preparation_without_intercept.R", package = "BSDDM"))
rm(list = ls())
save_location<-"~/Code_Running_Preparation/Saved_Model"
file_name = "Advant_Non_Anx"
prep_data_file_name<-"Advant_Non_Anx_data"
cluster_label = "Advantaged Overall"
Anxiety_status = "TD"
sub_type = "Quick_starter"
N=200
# ## Initialiation of Parameters
range_main_effect<-c(0,0.000065) ## /2.5  ## Decrease to increase
range_p= c(0,0.0072) ## Decrease to increase
range_d= c(0,0.06) ## Decrease to increase
range_stop_prob= c(0,0.007) ## Decrease to increase
range_rand_eff=c(0,0.19) ## m=10 ## with scale
range_rand_g_l<-range_rand_g_r<-c(0,0.045) ## m=10 # with scale
range_rand_b_l<-range_rand_b_r<-c(0,0.045) ##.25
## Initializing
set.seed (1451)
l<-log(runif(N, min = 0, max = 1))
a<-log(runif(N, min = 0, max = 1))
penal_param.int<-as.matrix(rbind(l,a))
delta_prime.int<-matrix(c(rep(-2,2*N)),nrow=2,ncol=N)
b_stop.int=rep(log(25),N)
nu_stop.int=rep(log(0.2),N)
stop_param.int<-as.matrix(rbind(b_stop.int,nu_stop.int))
GF.int<-rep(log(2),N)
TF1.int<-rep(log(32),N)
TF2.int<-rep(log(6),N)
prob_param.int<-as.matrix(rbind(GF.int,TF1.int,TF2.int),ncol=N,nrow=3)
rand_param_g_l.int<-rand_param_g_r.int<-as.matrix(c(0,log(400)),nrow=2)
rand_param_b_l.int<-rand_param_b_r.int<-as.matrix(c(0,log(400)),nrow=2)
## Dataset
dat <- readRDS("~/Code_Running_Preparation/Data/full_data.rds")
#source("~/Code_Running_Preparation/Code_Running_function.R", echo=TRUE)
nu_d = 3/2
kappa = 1
a = 1/5
b = 1/5
CA_threshold = 0.6
nknots = 12
m = 10
scale = 100
SSD_min = 50
upper_bound = 1000
L = 5
leapmax = 8
thin = 5
nparall = 48
nhmc = 20000
intercept=FALSE
library(BSDDM)
code_run(save_location = save_location,
dat = dat,
cluster_label,
Anxiety_status,
sub_type ,
sample_size = N,
file_name,prep_data_file_name,
range_main_eff = range_main_effect,
range_p = range_p,
range_d = range_d,
range_stop_prob = range_stop_prob,
range_rand_eff = range_rand_eff,
range_rand_g_l = range_rand_g_l,
range_rand_g_r = range_rand_g_r,
range_rand_b_l = range_rand_b_l,
range_rand_b_r = range_rand_b_r,
penal_param.int = penal_param.int,
delta_prime.int = delta_prime.int,
stop_param.int = stop_param.int,
prob_param.int = prob_param.int,
rand_param_g_l.int = rand_param_g_l.int,
rand_param_g_r.int = rand_param_g_r.int,
rand_param_b_l.int = rand_param_b_l.int,
rand_param_b_r.int = rand_param_b_r.int,
nu_d, kappa, a, b,
CA_threshold, nknots, m, scale,
SSD_min, upper_bound,
L, leapmax, thin, nparall, nhmc,intercept)
setwd("/home/012/f/fr/frs200000/BSDDM")  # Set working directory to the package root
list.files()
devtools::install()
rm(list = ls())
save_location<-"~/Code_Running_Preparation/Saved_Model"
file_name = "Advant_Non_Anx"
prep_data_file_name<-"Advant_Non_Anx_data"
cluster_label = "Advantaged Overall"
Anxiety_status = "TD"
sub_type = "Quick_starter"
N=200
# ## Initialiation of Parameters
range_main_effect<-c(0,0.000065) ## /2.5  ## Decrease to increase
range_p= c(0,0.0072) ## Decrease to increase
range_d= c(0,0.06) ## Decrease to increase
range_stop_prob= c(0,0.007) ## Decrease to increase
range_rand_eff=c(0,0.19) ## m=10 ## with scale
range_rand_g_l<-range_rand_g_r<-c(0,0.045) ## m=10 # with scale
range_rand_b_l<-range_rand_b_r<-c(0,0.045) ##.25
## Initializing
set.seed (1451)
l<-log(runif(N, min = 0, max = 1))
a<-log(runif(N, min = 0, max = 1))
penal_param.int<-as.matrix(rbind(l,a))
delta_prime.int<-matrix(c(rep(-2,2*N)),nrow=2,ncol=N)
b_stop.int=rep(log(25),N)
nu_stop.int=rep(log(0.2),N)
stop_param.int<-as.matrix(rbind(b_stop.int,nu_stop.int))
GF.int<-rep(log(2),N)
TF1.int<-rep(log(32),N)
TF2.int<-rep(log(6),N)
prob_param.int<-as.matrix(rbind(GF.int,TF1.int,TF2.int),ncol=N,nrow=3)
rand_param_g_l.int<-rand_param_g_r.int<-as.matrix(c(0,log(400)),nrow=2)
rand_param_b_l.int<-rand_param_b_r.int<-as.matrix(c(0,log(400)),nrow=2)
## Dataset
dat <- readRDS("~/Code_Running_Preparation/Data/full_data.rds")
#source("~/Code_Running_Preparation/Code_Running_function.R", echo=TRUE)
nu_d = 3/2
kappa = 1
a = 1/5
b = 1/5
CA_threshold = 0.6
nknots = 12
m = 10
scale = 100
SSD_min = 50
upper_bound = 1000
L = 5
leapmax = 8
thin = 5
nparall = 48
nhmc = 20000
intercept=FALSE
library(BSDDM)
code_run(save_location = save_location,
dat = dat,
cluster_label,
Anxiety_status,
sub_type ,
sample_size = N,
file_name,prep_data_file_name,
range_main_eff = range_main_effect,
range_p = range_p,
range_d = range_d,
range_stop_prob = range_stop_prob,
range_rand_eff = range_rand_eff,
range_rand_g_l = range_rand_g_l,
range_rand_g_r = range_rand_g_r,
range_rand_b_l = range_rand_b_l,
range_rand_b_r = range_rand_b_r,
penal_param.int = penal_param.int,
delta_prime.int = delta_prime.int,
stop_param.int = stop_param.int,
prob_param.int = prob_param.int,
rand_param_g_l.int = rand_param_g_l.int,
rand_param_g_r.int = rand_param_g_r.int,
rand_param_b_l.int = rand_param_b_l.int,
rand_param_b_r.int = rand_param_b_r.int,
nu_d, kappa, a, b,
CA_threshold, nknots, m, scale,
SSD_min, upper_bound,
L, leapmax, thin, nparall, nhmc,intercept)
setwd("/home/012/f/fr/frs200000/BSDDM")  # Set working directory to the package root
list.files()
devtools::install()
rm(list = ls())
save_location<-"~/Code_Running_Preparation/Saved_Model"
file_name = "Advant_Non_Anx"
prep_data_file_name<-"Advant_Non_Anx_data"
cluster_label = "Advantaged Overall"
Anxiety_status = "TD"
sub_type = "Quick_starter"
N=200
# ## Initialiation of Parameters
range_main_effect<-c(0,0.000065) ## /2.5  ## Decrease to increase
range_p= c(0,0.0072) ## Decrease to increase
range_d= c(0,0.06) ## Decrease to increase
range_stop_prob= c(0,0.007) ## Decrease to increase
range_rand_eff=c(0,0.19) ## m=10 ## with scale
range_rand_g_l<-range_rand_g_r<-c(0,0.045) ## m=10 # with scale
range_rand_b_l<-range_rand_b_r<-c(0,0.045) ##.25
## Initializing
set.seed (1451)
l<-log(runif(N, min = 0, max = 1))
a<-log(runif(N, min = 0, max = 1))
penal_param.int<-as.matrix(rbind(l,a))
delta_prime.int<-matrix(c(rep(-2,2*N)),nrow=2,ncol=N)
b_stop.int=rep(log(25),N)
nu_stop.int=rep(log(0.2),N)
stop_param.int<-as.matrix(rbind(b_stop.int,nu_stop.int))
GF.int<-rep(log(2),N)
TF1.int<-rep(log(32),N)
TF2.int<-rep(log(6),N)
prob_param.int<-as.matrix(rbind(GF.int,TF1.int,TF2.int),ncol=N,nrow=3)
rand_param_g_l.int<-rand_param_g_r.int<-as.matrix(c(0,log(400)),nrow=2)
rand_param_b_l.int<-rand_param_b_r.int<-as.matrix(c(0,log(400)),nrow=2)
## Dataset
dat <- readRDS("~/Code_Running_Preparation/Data/full_data.rds")
#source("~/Code_Running_Preparation/Code_Running_function.R", echo=TRUE)
nu_d = 3/2
kappa = 1
a = 1/5
b = 1/5
CA_threshold = 0.6
nknots = 12
m = 10
scale = 100
SSD_min = 50
upper_bound = 1000
L = 5
leapmax = 8
thin = 5
nparall = 48
nhmc = 20000
intercept=FALSE
library(BSDDM)
code_run(save_location = save_location,
dat = dat,
cluster_label,
Anxiety_status,
sub_type ,
sample_size = N,
file_name,prep_data_file_name,
range_main_eff = range_main_effect,
range_p = range_p,
range_d = range_d,
range_stop_prob = range_stop_prob,
range_rand_eff = range_rand_eff,
range_rand_g_l = range_rand_g_l,
range_rand_g_r = range_rand_g_r,
range_rand_b_l = range_rand_b_l,
range_rand_b_r = range_rand_b_r,
penal_param.int = penal_param.int,
delta_prime.int = delta_prime.int,
stop_param.int = stop_param.int,
prob_param.int = prob_param.int,
rand_param_g_l.int = rand_param_g_l.int,
rand_param_g_r.int = rand_param_g_r.int,
rand_param_b_l.int = rand_param_b_l.int,
rand_param_b_r.int = rand_param_b_r.int,
nu_d, kappa, a, b,
CA_threshold, nknots, m, scale,
SSD_min, upper_bound,
L, leapmax, thin, nparall, nhmc,intercept)
setwd("/home/012/f/fr/frs200000/BSDDM")  # Set working directory to the package root
list.files()
devtools::install()
remove.packages("BSDDM", lib = "/home/012/f/fr/frs200000/R/x86_64-pc-linux-gnu-library/4.4")
setwd("/home/012/f/fr/frs200000/BSDDM")  # Set working directory to the package root
list.files()
devtools::install()
remove.packages("BSDDM", lib = "/home/012/f/fr/frs200000/R/x86_64-pc-linux-gnu-library/4.4")
setwd("/home/012/f/fr/frs200000/BSDDM")  # Set working directory to the package root
list.files()
devtools::install()
setwd("/home/012/f/fr/frs200000/BSDDM")  # Set working directory to the package root
list.files()
devtools::install()
q()
